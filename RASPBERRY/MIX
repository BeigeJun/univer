#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/mman.h>
#include <linux/i2c-dev.h>
#include <sys/ioctl.h>
#include <unistd.h>

#include <wiringPi.h>

#define LED_R 1
#define LED_G 16
#define LED_B 15
#define BH1750_ADDR 0x23 // Replace with the actual I2C address of the sensor
#define BUFSIZE 256
#define LED_NUM 8
int pin[] = {26,16,20,19,13,06,05,21};
int digit[10][8] = {{1,1,1,1,1,1,0,0},{0,1,1,0,0,0,0,0},{1,1,0,1,1,0,1,0},{1,1,1,1,0,0,1,0},{0,1,1,0,0,1,1,0},{1,0,1,1,0,1,1,0},{1,0,1,1,1,1,1,0},{1,1,1,0,0,0,0,0},{1,1,1,1,1,1,1,0},{1,1,1,1,0,1,1,0}};
int gpioExport(int gpio) {
 	int fd;
	char buf[128];

 	fd = open("/sys/class/gpio/export", O_WRONLY);
	if(fd < 0) {
		perror("GPIO ERR : export\n");
		return(fd);
	}
	sprintf(buf, "%d", gpio); // buf : "number"

	//printf("gpio#:%s\n", buf);
 	write(fd, buf, strlen(buf));
 	close(fd);
}

int gpioWrite(int gpio, int val) {
 	int fd;
	char buf[128];

 	sprintf(buf, "/sys/class/gpio/gpio%d/value", gpio);
 	fd = open(buf, O_WRONLY);
	if(fd < 0) {
		perror("GPIO ERR : value\n");
		return(fd);
	}

	if(val == 0)
		write(fd, "0", 2);
	else
		write(fd, "1", 2);

   	close(fd);

	return(0);
}


int gpioUnexport(int gpio) {
 	int fd;
	char buf[128];
	fd = open("/sys/class/gpio/unexport", O_WRONLY);
	if(fd < 0) {
		perror("GPIO ERR : unexport\n");
		return(fd);
	}
	sprintf(buf, "%d", gpio);
	write(fd, buf,strlen(buf));
	close(fd);
}

int gpioDirection(int gpio, int dir) {
 	int fd;
	char buf[128];

	//printf("INput gpio_Direction !!!\n");

	sprintf(buf, "/sys/class/gpio/gpio%d/direction", gpio);
 	fd = open(buf, O_WRONLY);
	if(fd < 0) {
		perror("GPIO ERR : direction\n");
		return(fd);
	}
	if(dir == 0)
 		write(fd, "in", 3);
	else
 		write(fd, "out", 4);
 	close(fd);
}


void display(int gpio)
{
	gpioExport(gpio);
	gpioDirection(gpio,1);
	
	gpioWrite(gpio,1);
	sleep(1);
	gpioWrite(gpio,0);
	
	gpioUnexport(gpio);

}
void displayOnOff(int sw){
	int i,j;
	for (int i =0; i < LED_NUM; i++)
	{
		if(sw==1)
			gpioWrite(pin[i],1);
		else
			gpioWrite(pin[i],0);
	}
	sleep(1);
	for (int i =0; i < LED_NUM; i++)
	{
		if(sw==1)
			gpioWrite(pin[i],1);
		else
			gpioWrite(pin[i],0);
	}
}

void display_NUM(int num)
{
	for(int i =0; i<LED_NUM;i++)
	{
		gpioWrite(pin[i],0);
	}
	for(int i =0; i<LED_NUM;i++)
	{
		gpioWrite(pin[i],digit[num][i]);
	}
	sleep(1);
	for(int i =0; i<LED_NUM;i++)
	{
		gpioWrite(pin[i],1);
	}
}

void oper_rgbLED()
{
	int i=0;
	
	digitalWrite(LED_R,HIGH);
	digitalWrite(LED_G,HIGH);
	digitalWrite(LED_B,HIGH);
	delay(1000);
	
	while(i++<5){
		printf("RED\n");
		
		digitalWrite(LED_R,HIGH);
		digitalWrite(LED_G,LOW);
		digitalWrite(LED_B,LOW);
		delay(500);
		printf("GREEN\n");
		
		digitalWrite(LED_R,LOW);
		digitalWrite(LED_G,HIGH);
		digitalWrite(LED_B,LOW);
		delay(500);
		printf("BLUE\n");
		
		digitalWrite(LED_R,LOW);
		digitalWrite(LED_G,LOW);
		digitalWrite(LED_B,HIGH);
		delay(500);
		
		printf("W\n");
		
		digitalWrite(LED_R,HIGH);
		digitalWrite(LED_G,HIGH);
		digitalWrite(LED_B,HIGH);
		delay(500);
	}
		digitalWrite(LED_R,LOW);
		digitalWrite(LED_G,LOW);
		digitalWrite(LED_B,LOW);
		
}

int main()
{
    int fd;
        int     luxRaw;
        float   lux;
    unsigned char buf[3] = {0};
    
    if(wiringPiSetup() == -1){
		printf("ee");
		return -1;
	}
	pinMode(LED_R,OUTPUT);
	pinMode(LED_G,OUTPUT);
	pinMode(LED_B,OUTPUT);
	
	for(int i = 0 ; i <LED_NUM;i++)
	{
		gpioExport(pin[i]);
		gpioDirection(pin[i],1);
	}
	
	
    while(0){
    if ((fd = open("/dev/i2c-1", O_RDWR)) < 0) { // Open the I2C device file
        perror("open");
        exit(1);
    }

    if (ioctl(fd, I2C_SLAVE, BH1750_ADDR) < 0) { // Set the I2C slave address
        perror("ioctl");
        exit(1);
    }


    // Send measurement request to the sensor
    //buf[0] = 0x01; // Power On
    //buf[0] = 0x07; // Reset
    buf[0] = 0x23; // One time L-Resolution measurement
    if (write(fd, buf, 1) != 1) {
        perror("write");
        exit(1);
    }
    // Wait for measurement to be ready (typically takes 120ms)
    

    // Read the measurement value from the sensor
    if (read(fd, buf, 2) != 2) {
        perror("read");
        exit(1);
    }
    // Convert the measurement value to lux
    luxRaw = (buf[0] << 8) | buf[1];
    lux = (float)luxRaw / 1.2; // Divide by 1.2 to get the actual lux value
    printf("Lux: %d(%7.3f) :: %x, %x\n", luxRaw, lux, buf[0], buf[1]);
    close(fd);
    
    if( luxRaw < 100)
    {
		digitalWrite(LED_R,HIGH);
		digitalWrite(LED_G,LOW);
		digitalWrite(LED_B,LOW);
		delay(500);
	}
	else if(luxRaw >100 && luxRaw <200)
	{
		digitalWrite(LED_R,LOW);
		digitalWrite(LED_G,HIGH);
		digitalWrite(LED_B,LOW);
		delay(500);
	}
	else if(luxRaw >200)
	{
		digitalWrite(LED_R,LOW);
		digitalWrite(LED_G,LOW);
		digitalWrite(LED_B,HIGH);
		delay(500);
	}
	if(luxRaw < 80)
		display_NUM(0);
	else if(luxRaw >80 && luxRaw < 160)
		display_NUM(1);
	else if(luxRaw >160 && luxRaw < 180)
		display_NUM(2);	
	else if(luxRaw >180 && luxRaw < 240)
		display_NUM(3);
	else if(luxRaw >240 && luxRaw < 320)
		display_NUM(4);
	else if(luxRaw >320 && luxRaw < 400)
		display_NUM(5);
	else if(luxRaw >400 && luxRaw < 480)
		display_NUM(6);
	else if(luxRaw >480 && luxRaw < 560)
		display_NUM(7);
	else if(luxRaw >560)
		display_NUM(8);
		
	
	
	
	
}
for(int i = 0 ; i <LED_NUM;i++)
	{
		gpioUnexport(pin[i]);
	}
    return 0;

}
