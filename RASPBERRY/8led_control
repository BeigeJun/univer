#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <wiringPi.h>
int gpioExport(int gpio) {
        int fd;
        char buf[128];

        fd = open("/sys/class/gpio/export", O_WRONLY);
        if(fd < 0) {
                perror("GPIO ERR : export\n");
                return(fd);
        }
        sprintf(buf, "%d", gpio); // buf : "number"

        //printf("gpio#:%s\n", buf);
        write(fd, buf, strlen(buf));
        close(fd);
}

int gpioDirection(int gpio, int dir) {
        int fd;
        char buf[128];

        //printf("INput gpio_Direction !!!\n");

        sprintf(buf, "/sys/class/gpio/gpio%d/direction", gpio);
        fd = open(buf, O_WRONLY);
        if(fd < 0) {
                perror("GPIO ERR : direction\n");
                return(fd);
        }
        if(dir == 0)
                write(fd, "in", 3);
        else
                write(fd, "out", 4);
        close(fd);
}

int gpioRead(int gpio) {
        int fd;
        char buf[128], inCh;

        sprintf(buf, "/sys/class/gpio/gpio%d/value", gpio);
        fd = open(buf, O_RDONLY);
        if(fd < 0) {
                perror("GPIO ERR : value\n");
                return(fd);
        }

        read(fd,&inCh,1);
        printf("INput gpio%d[%x] !!!\n", gpio, inCh);

        inCh = inCh - '0';

        close(fd);

        return(inCh);
}

int gpioWrite(int gpio, int val) {
        int fd;
        char buf[128];

        sprintf(buf, "/sys/class/gpio/gpio%d/value", gpio);
        fd = open(buf, O_WRONLY);
        if(fd < 0) {
                perror("GPIO ERR : value\n");
                return(fd);
        }

        if(val == 0)
                write(fd, "0", 2);
        else
                write(fd, "1", 2);

        close(fd);

        return(0);
}

int gpioUnexport(int gpio) {
        int fd;
        char buf[128];
        fd = open("/sys/class/gpio/unexport", O_WRONLY);
        if(fd < 0) {
                perror("GPIO ERR : unexport\n");
                return(fd);
        }
        sprintf(buf, "%d", gpio);
        write(fd, buf,strlen(buf));
        close(fd);
}

int ledControl(int gpio,  int onOff)
{
        int fd;
        char buf[128];

        gpioExport(gpio);

        gpioDirection(gpio, 1) ; // "out"

        gpioWrite(gpio, onOff);

        gpioUnexport(gpio);

        return 0;
}


// Usage : ./ledgpio 21 1/0
int main(int argc, char **argv)
{
        gpioExport(16);
        gpioExport(20);
        gpioExport(21);
        gpioDirection(16,1);
        gpioDirection(20,1);
        gpioDirection(21,1);
        gpioWrite(16,0);
        gpioWrite(20,0);
        gpioWrite(21,0);
        getchar(); //1
        gpioWrite(16,1);
        gpioWrite(20,0);
        gpioWrite(21,0);
        getchar(); //2
        gpioWrite(16,0);
        gpioWrite(20,1);
        gpioWrite(21,0);
        getchar(); //3
        gpioWrite(16,1);
        gpioWrite(20,1);
        gpioWrite(21,0);
        getchar();//4
        gpioWrite(16,0);
        gpioWrite(20,0);
        gpioWrite(21,1);
        getchar(); //5
        gpioWrite(16,1);
        gpioWrite(20,0);
        gpioWrite(21,1);
        getchar();//6
        gpioWrite(16,0);
        gpioWrite(20,1);
        gpioWrite(21,1);
        getchar();//7
        gpioWrite(16,1);
        gpioWrite(20,1);
        gpioWrite(21,1);
        getchar();//8
        
        gpioUnexport(16);
        gpioUnexport(20);
        gpioUnexport(21);
        return 0;
        
}
