#include <stdio.h>
#include <stdlib.h>
#define QUEUE_SIZE 10

int *queue;
int	front;			// 전단
int	rear;			// 후단
int size = 1;
int* temp;
int Q_S = 1;
int isEmpty() {
	if (front == rear) return 1;
	else return 0;
}


void temp_copy() {
	temp = (int*)malloc((QUEUE_SIZE * (size)) * sizeof(int));
	//queue = (int*)malloc((QUEUE_SIZE * (size + 1)) * sizeof(int));
	int num = front;
	if (front == 0) {
		for (int i = 1; i < QUEUE_SIZE*Q_S; i++) {
			temp[i - 1] = queue[i];
		}
	}
	else {
		for (int i = 0; i < QUEUE_SIZE*Q_S; i++, num++) {
			if (num == QUEUE_SIZE*Q_S) {
				num = 0;
			}
			temp[i] = queue[num];
		}
	}
}

void add()
{
	queue = (int*)malloc(QUEUE_SIZE*(Q_S+1) * sizeof(int));
	queue[0] = 0;
	for (int i = 0; i < QUEUE_SIZE * Q_S; i++)
	{
		queue[i+1] = temp[i];
	}
	front = 0;
	rear = QUEUE_SIZE * Q_S-1;
	Q_S++;
}

// 큐가 포화 상태인지 확인하는 연산
int isFull() {
	if (front == (rear + 1) % QUEUE_SIZE*Q_S) return 1;
	else return 0;
}

int queueSize() { 
	return QUEUE_SIZE*Q_S; 
}

// 스택의 top에 원소를 삽입하는 연산
void enqueue(int item) {
	int *temp;

	if (isFull()) {
		printf(" Full QUEUE\n");
		temp_copy();
		add();
		rear = (rear + 1);
		queue[rear] = item;
	}
	else {
		rear = (rear + 1);
		queue[rear] = item;
	}
}

int dequeue() {
	if (isEmpty()) {	// 큐가 공백 상태인 경우
		printf("\n\n Queue is Empty!!\n");
		return 0;
	}
	else
	{
		front = (front + 1) % QUEUE_SIZE*Q_S;
		return queue[front]; 
	}
	return 0;
}

// 큐의 원소를 출력하는 연산
void printQueue() {
	int i, maxi = rear;
	if (front >= rear) maxi += QUEUE_SIZE;
	printf("Queue size is [%2d]= ", queueSize());
	for (i = front + 1; i <= maxi; i++)
		printf("%2d ", queue[i % QUEUE_SIZE]);
	printf("\n");
}



int main(void) {
	int i;
	queue = (int*)malloc(QUEUE_SIZE * sizeof(int));

	for (i = 0; i < 9; i++) enqueue(i + 1);
	printQueue();
	for (i = 10; i < 20; i++) enqueue(i + 1);
	printQueue();
	free(temp);
	free(queue);

}
