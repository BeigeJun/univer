#include <iostream>
#include <string>
using namespace std;
class Playfair {
	char mTable[25];
	string mPair;
	string mKey;
	string Passward = "";
	char Pair1;
	char Pair2;
public:
	Playfair(string mKey, string mPair);
	void makeTable();
	void showTable();
	string makeEncryption(string mEncryption);
};
Playfair::Playfair(string mKey, string mPair) {
	this->mKey = mKey;
	this->mPair = mPair;
}
void Playfair::makeTable() {
	// mKey와 mPair를 이용하여 mTable을 만드세요. (5 X 5 로 표현하시오)
	cout << mKey << endl;
	for (int i = 0; i < mKey.length(); i++) {             // 키값 대문자로 변환
		mKey[i] = toupper(mKey[i]);
	}
	cout << mKey << endl;
	mKey += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";                 //키값 뒤에 알파벳 전부 붙이기
	cout << mKey << endl;
	for (int i = 0; i < mPair.length(); i++) {            // 페어값 대문자로 변환
		mPair[i] = toupper(mPair[i]);
	}
	cout << mPair << endl;
	Pair1 = mPair[0];
	Pair2 = mPair[2];
	for (int a = 0; a < mKey.length(); a++)               //키값의 한자리 한자리 다 읽으면서 페어값이
	{                                                     // 있으면 앞자리를 뒷자리로 덮어쓰기
		if (mKey[a] == Pair1)                             // 두 문자는 한자리에있는걸로 취급
		{
			mKey[a] = Pair2;
		}
	}
	cout << Pair1<< "를"<< Pair2 <<"로 바꾸기" << mKey << endl;
	int check_used;
	int adress = 0;
	for (int a = 0; a < mKey.length(); a++) {             //이중포문을 이용하여 중복된 문자를 제외하고
		check_used = 0;                                   //처음 쓰인 문자만 mTable에다 저장을한다.
		for (int i = 0; i != 25; i++) {                   //mKey의 i번째 값과 mTable의 모든 데이터와
			if (mKey[a] == mTable[i]) {                   //비교를 해보고 만약 mKey의 값이 mTable에 존재
				check_used++;                             //했다면 check_used의 값을 올려준다
			}										      //만약 겹치는 부분이 있었으면 check_used의 값이
		}                                                 //움직였을테니 0이 아니면 mTable에 추가하지않고
		if (check_used == 0) {                            //0이면 추가해준다
			mTable[adress] = mKey[a];
			adress++;
		}
	}
	mTable[adress] = NULL;
	cout <<"중복문자 지운 후 : "<< mTable << endl << endl;
}
void Playfair::showTable() {
	// mTable에 있는 값들을 5 X 5 로 화면에 출력하시오.
	int count = 0;                                          //mTable의 값을 5개씩 잘라서 5번 출력하는데 키값을 발견하면
	cout << "mTable" << endl << endl;                       //묶인 값 두개 다 출력해준다
	for (int i = 0; i < 5; i++) {
		for (int i = 0; i < 5; i++, count++) {
			if (mTable[count] == Pair2) {
				cout << Pair1 << "/" << Pair2<<" ";
			}
			else {
				cout << mTable[count] << "   ";
			}
		}
		cout << endl;
	}
}
string Playfair::makeEncryption(string mEncryption) {
	
	int i = 0;
	int howLong, isthatodd;
	for (i = 0; i < mEncryption.length(); i++) {            // 대문자로 변환
		mEncryption[i] = toupper(mEncryption[i]);
	}
	cout << "대문자로 전환 :" << mEncryption << endl;
	for (int a = 0; a <= mEncryption.length(); a++)         // 암호화할 문장 공백제거
	{
		if (mEncryption[a] == ' ')
		{
			mEncryption.erase(a, 1);
		}
	}

	for (int j = 0; j < mEncryption.length(); j = j + 2)    //두자리씩 끊어서 같은지 확인하는데
	{														//만약 같으면 첫번째 자리 뒤에다가 X삽입
		if (mEncryption[j] == mEncryption[j + 1])
			mEncryption = mEncryption.insert(j + 1, "X");
	}
	howLong = mEncryption.length();                        //글자의 수가 만약 홀수이면 맨뒷자리에 X 추가
	cout << "글자수 : " << howLong << endl;
	isthatodd = howLong % 2;
	if (isthatodd == 1) {
		cout << "홀수입니다." << endl;                      //마지막 자리에 X 붙이기
		mEncryption += "X";
		cout << mEncryption << endl;
	}
	else {
		cout << "짝수입니다." << endl;
	}
	cout << "x치환 후 : ";
	for (int j = 0; j < mEncryption.length(); j++) {
		cout << mEncryption[j];
		if (j % 2 != 0)
			cout << "  ";
	}
	cout << endl;
	string First_Word;
	string Last_Word;
	int Faddres, Laddres;
	int z, q;
	for (int s = 0; s < mEncryption.length(); s = s + 2)
	{
		First_Word = mEncryption[s];                  //두글자씩 끊어서 보는데 앞자리 뒷자리
		Last_Word = mEncryption[s + 1];               //위치를 만드는 공간

		if (mEncryption[s] == Pair1) {                //만약 두글자를 보는데 페어값이 있으면
			mEncryption[s] = Pair2;                   //해당 글자를 mTable에 남아있는 값으로 바꿔주기
			                                          //한 문자를 같이 있는취급을 하지만 mTable에는 하나의
		}                                             //값만있기때문
		if (mEncryption[s+1] == Pair1) {
			mEncryption[s+1] = Pair2;
			
		}
		for (z = 0; z < 25; z++)                      //mTable에서 해당 글자 순서 찾는 for문
		{
			int c = mTable[z];
			if (mTable[z] == mEncryption[s])
			{
				Faddres = z;
			}
		}
		for (q = 0; q < 25; q++)                      //mTable에서 해당 글자 순서 찾는 for문
		{
			if (mTable[q] == mEncryption[s + 1])
			{
				Laddres = q;
			}
		}
		int F_Line, L_Line;                           //찾은 숫자를 토대로 라인을 나눠줌
		if (Faddres >= 0 && Faddres <= 4)
		{
			F_Line = 1;
		}
		else if (Faddres >= 5 && Faddres <= 9)
		{
			F_Line = 2;
		}
		else if (Faddres >= 10 && Faddres <= 14)
		{
			F_Line = 3;
		}
		else if (Faddres >= 15 && Faddres <= 19)
		{
			F_Line = 4;
		}
		else if (Faddres >= 20 && Faddres <= 24)
		{
			F_Line = 5;
		}
		if (Laddres >= 0 && Laddres <= 4)             //찾은 숫자를 토대로 라인을 나눠줌
		{
			L_Line = 1;
		}
		else if (Laddres >= 5 && Laddres <= 9)
		{
			L_Line = 2;
		}
		else if (Laddres >= 10 && Laddres <= 14)
		{
			L_Line = 3;
		}
		else if (Laddres >= 15 && Laddres <= 19)
		{
			L_Line = 4;
		}
		else if (Laddres >= 20 && Laddres <= 24)
		{
			L_Line = 5;
		}
		int True, True1;
		True = (Faddres + 1) % 5;                     //True와 True1은 문자순서가 맨 마지막에 남아있는지 확인하는
		True1 = (Laddres + 1) % 5;                    //변수. 예를들어 4번째, 9번째, 14번째, 19번째, 24번째에 있다면
		if (L_Line == F_Line)                         //암호화될 문자는 0,5,10,15,20번째 문자가 들어가야한다.
		{                                             //만약 두 라인이 같다면 같은 열에 있으므로 오른쪽으로 한칸 가거나
			if (True == 0)                            //맨 왼쪽값이 되어야한다. 여기서 True와 True1이 사용되는데
			{                                         //(글자 순서 + 1)%5를 하여 글자의 위치가 어딧는지 확인한다. 
				Passward += mTable[Faddres - 4];      //만약 True와 True1의 값이 0이면 맨 오른쪽에 위치하기 때문에
			}                                         //맨 왼쪽값이 암호화할 문자이다. 만약 0이 아니면 맨 오른쪽이
			else if (True != 0)                       //아니기때문에 오른쪽으로 한칸씩 움직이면 된다.
			{                                         //그 후 해당 문자를 passward에 추가해준다.
				Passward += mTable[Faddres + 1];
			}
			if (True1 == 0)
			{
				Passward += mTable[Laddres - 4];
			}
			else if (True1 != 0)
			{
				Passward += mTable[Laddres + 1];
			}
		}
		else if (Faddres % 5 == Laddres % 5) {        //같은 라인에 없었다면 같은 열에 있는지 확인한다.
			if (Faddres >= 20 && Faddres <= 24) {     //문자의 순서%5를 해서 값이 같으면 같은열에 있는걸로 인지한다.
				Passward += mTable[Faddres - 20];     //그리고 문자의 순서가 20 이상이면 맨 마지막줄 이기 때문에
			}                                         //맨 윗줄로 올라가기 위해 -20을 해준다.
			else {                                    //만약 20이상이 아니라면 +5를 하여 바로 밑 값으로 들어간다.
				Passward += mTable[Faddres + 5];      //그 후 해당 문자를 passward에 추가해준다.
			}
			if (Laddres >= 20 && Laddres <= 24) {
				Passward += mTable[Laddres - 20];
			}
			else {
				Passward += mTable[Laddres + 5];
			}
		}
		else {                                        //같은 라인도 같은 열도 아니면 두 문자의 행과 열이 만나는곳을
			int gap;                                  //찾아야하는데 이때 다시 라인값을 사용하여 위치가 얼마나 차이가
			if (F_Line > L_Line) {                    //나는지 찾는다. 그 후 차이나는 값 * 5를 더하거나 빼서 암호화 될
				gap = F_Line - L_Line;                //문자를 찾는다. 그 후 해당 문자를 passward에 추가해준다.
				Passward += mTable[Laddres + 5 * gap];
				Passward += mTable[Faddres - 5 * gap];
			}
			else {
				gap = L_Line - F_Line;
				Passward += mTable[Laddres - 5 * gap];
				Passward += mTable[Faddres + 5 * gap];
			}
		}
		
	}
	cout <<"암호화한 문장 : "<< Passward << endl;
	return mEncryption;
}
int main() {
	string str;
	Playfair pfair("assasinator", "q/z");
	pfair.makeTable();
	pfair.showTable();
	cout << "암호화할 문장 : ";
	getline(cin, str);
	pfair.makeEncryption(str);
}
